package CraftTannery

// Extension library imports:
import ItemRestriction

// Local imports:
import ItemRecipeExtended
import LocalObjectIDs
import GameMode


init
    GameMode.onModeSelectionFinish() ->
        let tannery = new UnitRequirement("tannery")
        tannery.addUnit(UNIT_TANNERY)

        let omninousAltar = new UnitRequirement("omninousAltar")
        omninousAltar.addUnit(UNIT_OMINOUS_ALTAR)

        let elkBoots = new ItemRecipeExt(ITEM_ELK_SKIN_BOOTS, 0, true, true, false, ABILITY_QM_ELK_SKIN_BOOTS)
        ..addItem(ITEM_ELK_HIDE)
        ..addItem(ITEM_ELK_HIDE)
        ..generateRecipeString(ABILITY_QM_ELK_SKIN_BOOTS)

        let elkGloves = new ItemRecipeExt(ITEM_ELK_SKIN_GLOVES, 0, true, true, false, ABILITY_QM_ELK_SKIN_GLOVES)
        ..addItem(ITEM_ELK_HIDE)
        ..addItem(ITEM_ELK_HIDE)
        ..generateRecipeString(ABILITY_QM_ELK_SKIN_GLOVES)

        let elkCoat = new ItemRecipeExt(ITEM_ELK_SKIN_COAT, 0, true, true, false, ABILITY_QM_ELK_SKIN_COAT)
        ..addItem(ITEM_ELK_HIDE)
        ..addItem(ITEM_ELK_HIDE)
        ..addItem(ITEM_ELK_HIDE)
        ..generateRecipeString(ABILITY_QM_ELK_SKIN_COAT)

        let wolfBoots = new ItemRecipeExt(ITEM_WOLF_SKIN_BOOTS, 0, true, true, false, ABILITY_QM_JUNGLE_WOLF_SKIN_BOOTS)
        ..addItem(ITEM_JUNGLE_WOLF_HIDE)
        ..addItem(ITEM_JUNGLE_WOLF_HIDE)
        ..generateRecipeString(ABILITY_QM_JUNGLE_WOLF_SKIN_BOOTS)

        let wolfGloves = new ItemRecipeExt(ITEM_WOLF_SKIN_GLOVES, 0, true, true, false, ABILITY_QM_JUNGLE_WOLF_SKIN_GLOVES)
        ..addItem(ITEM_JUNGLE_WOLF_HIDE)
        ..addItem(ITEM_JUNGLE_WOLF_HIDE)
        ..generateRecipeString(ABILITY_QM_JUNGLE_WOLF_SKIN_GLOVES)

        let wolfCoat = new ItemRecipeExt(ITEM_WOLF_SKIN_COAT, 0, true, true, false, ABILITY_QM_JUNGLE_WOLF_SKIN_COAT)
        ..addItem(ITEM_JUNGLE_WOLF_HIDE)
        ..addItem(ITEM_JUNGLE_WOLF_HIDE)
        ..addItem(ITEM_JUNGLE_WOLF_HIDE)
        ..generateRecipeString(ABILITY_QM_JUNGLE_WOLF_SKIN_COAT)

        let bearBoots = new ItemRecipeExt(ITEM_BEAR_SKIN_BOOTS, 0, true, true, false, ABILITY_QM_JUNGLE_BEAR_SKIN_BOOTS)
        ..addItem(ITEM_JUNGLE_BEAR_HIDE)
        ..addItem(ITEM_JUNGLE_BEAR_HIDE)
        ..generateRecipeString(ABILITY_QM_JUNGLE_BEAR_SKIN_BOOTS)

        let bearGloves = new ItemRecipeExt(ITEM_BEAR_SKIN_GLOVES, 0, true, true, false, ABILITY_QM_JUNGLE_BEAR_SKIN_GLOVES)
        ..addItem(ITEM_JUNGLE_BEAR_HIDE)
        ..addItem(ITEM_JUNGLE_BEAR_HIDE)
        ..generateRecipeString(ABILITY_QM_JUNGLE_BEAR_SKIN_GLOVES)

        let bearCoat = new ItemRecipeExt(ITEM_BEAR_SKIN_COAT, 0, true, true, false, ABILITY_QM_JUNGLE_BEAR_SKIN_COAT)
        ..addItem(ITEM_JUNGLE_BEAR_HIDE)
        ..addItem(ITEM_JUNGLE_BEAR_HIDE)
        ..addItem(ITEM_JUNGLE_BEAR_HIDE)
        ..generateRecipeString(ABILITY_QM_JUNGLE_BEAR_SKIN_COAT)

        let hydraFins = new ItemRecipeExt(ITEM_HYDRA_FINS, 0, true, true, false, ABILITY_QM_HYDRA_SCALE_BOOTS)
        ..addItem(ITEM_HYDRA_SCALE)
        ..addItem(ITEM_HYDRA_SCALE)
        ..generateRecipeString(ABILITY_QM_HYDRA_SCALE_BOOTS)

        let hydraClaws = new ItemRecipeExt(ITEM_HYDRA_CLAWS, 0, true, true, false, ABILITY_QM_HYDRA_SCALE_GLOVES)
        ..addItem(ITEM_HYDRA_SCALE)
        ..addItem(ITEM_HYDRA_SCALE)
        ..generateRecipeString(ABILITY_QM_HYDRA_SCALE_GLOVES)

        let hydraCoat = new ItemRecipeExt(ITEM_HARDEN_SCALES, 0, true, true, false, ABILITY_QM_HYDRA_SCALE_COAT)
        ..addItem(ITEM_HYDRA_SCALE)
        ..addItem(ITEM_HYDRA_SCALE)
        ..addItem(ITEM_HYDRA_SCALE)
        ..generateRecipeString(ABILITY_QM_HYDRA_SCALE_COAT)


        elkBoots  .requirement = tannery
        elkGloves .requirement = tannery
        elkCoat   .requirement = tannery
        wolfBoots .requirement = tannery
        wolfGloves.requirement = tannery
        wolfCoat  .requirement = tannery
        bearBoots .requirement = tannery
        bearGloves.requirement = tannery
        bearCoat  .requirement = tannery

        hydraFins . requirement = omninousAltar
        hydraClaws. requirement = omninousAltar
        hydraCoat . requirement = omninousAltar
