package ItemRecipeExtended

// Standard library imports:
import LinkedList
import ClosureEvents

// Extension library imports:
import LocalObjectIDs
import ItemRecipe
import IdListConstant
import ResourceSpawns
import UnitExtensions
import ClosuresForItems
import Lodash
import Mixing


public class ItemRecipeExt extends ItemRecipe
    var pickUpRange = 700.

    construct(int reward, int charges, boolean ordered, boolean permanent, boolean pickupable, int quickMakeAbilId)
        super(reward, charges, ordered, permanent, pickupable)
        if quickMakeAbilId != 0
            // This causes issue with tannery, I don't want the items to be transmuted on the ItemRecipe onCast() function
            // I want them to be transmuted through onQucikMakeCast
            //this.setAbility(quickMakeAbilId)
            EventListener.onCast(quickMakeAbilId) (unit caster) ->
                onQuickMakeCast(caster)

    override function assemble(unit whichUnit) returns boolean
        return super.assemble(whichUnit)

    function lowerMaterialCount(LinkedList<item> fromItems)
        let max = fromItems.size()
        for i = 0 to max
            // If item is a spawned material, lower
            if(MATERIAL_COUNTER_LIST.has(fromItems.get(i).getTypeId()))
                lowerItem(1)

    function onQuickMakeCast(unit caster)
        print(caster.getName())
        let pos = caster.getPos()
        let items = new OwnedLinkedList<item>()
        let inventory = caster.getInventory()

        // specialHerb.put(ITEM_BLUE_HERB, 0)
        // specialHerb.put(ITEM_YELLOW_HERB, 0)
        // specialHerb.put(ITEM_PURPLE_HERB, 0)
        // specialHerb.put(ITEM_ORANGE_HERB, 0)

        if caster.isTroll()
            pickUpRange = 100
        if caster.getTypeId() == UNIT_CRAFT_MASTER
            pickUpRange = 300

        caster.dropItems()

        let iter = this.getIngredients().iterator()

        while iter.hasNext()
            let ingredient = iter.next()
            print(ingredient.index)
            let found = findNearestItem(pos, pickUpRange, i -> i.getTypeId() == ingredient.itemTypeId)

            if found != null
                while iter.hasNext() and iter.lookahead().index == ingredient.index
                    iter.next()
                // if specialHerb.has(found.getTypeId())
                //     specialHerb.put(found.getTypeId(), specialHerb.get(found.getTypeId()) + 1)

                //In order to avoid picking up the same special herb too much time
                // if specialHerb.get(found.getTypeId()) > herbThreshold
                //     found = null

                //Special case for eob, once you get 2 spec, you don't want to be able to pick up 2 spec of another type
                //Not pretty but couldn't figure out something else
                // if this.getAbility() == ABILITY_QM_ESSENCE_BEES and specialHerb.get(found.getTypeId()) == herbThreshold
                //     herbThreshold = 1
                items.add(found)
                // We don't want to iterate over same item multiple time
                found.setVisible(false)
            // else if found == null and iter.lookahead().index != ingredient.index
            //     for elem in items
            //         elem.setVisible(true)
            //     return

        iter.close()
        // Setting the items visible again so they aren't "lost" even if recipe assemble fails
        for elem in items
            elem.setVisible(true)

        // Testing if the recipe can be assembled
        if this.test(caster, items) != null
            for elem in items
                // Remove transmutable item from inventory list
                print(elem.getName())
                inventory.remove(elem)
                caster.addItemHandle(elem)

        if caster.getTypeId() == UNIT_POT
            mix(caster)

        if caster.getTypeId() == UNIT_TANNERY
            this.assemble(caster)

        this.requirement.removeUnit(caster.getTypeId())
        this.requirement.addUnit(UNIT_DUMMY)

        for elem in inventory
            caster.addItemHandle(elem)
        caster.moveInventoryDown()

        this.requirement.removeUnit(UNIT_DUMMY)
        this.requirement.addUnit(caster.getTypeId())
        // if this.getAbility() == ABILITY_QM_ESSENCE_BEES
        //     herbThreshold = 2
        destroy items
        destroy inventory
